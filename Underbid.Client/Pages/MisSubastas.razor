@page "/MisSubastas"
@page "/MisSubastas/{idUsuario:long}"
@inject IPublicacionesService publicacionesService;
@inject IHubRegistroService hubRegistroService;
@inject NotificationService NotificationService;
@implements IAsyncDisposable;

<p>Inicio > Mis Subastas</p>

<div class="contenedor">

    <div class="content1">

        <div class="contenidoTarjetas">

            @* Apartado de Contenido mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm *@

            @if (respuestaData?.Resultado != null)
            {
                @foreach (var item in respuestaData.Resultado)
                {

                    <div class="card tuneo" style="width: 18rem; height: min-content; border: 0px;">
                        <div class="card-body carta-cuerpo">
                            <h5 class="card-title"><strong>@item.Titulo</strong></h5>
                            <p class="card-text">@item.Descripcion</p>
                        </div>
                        <ul class="list-group list-group-flush">
                            <li class="list-group-item"><i class="bi bi-code-square"></i>&nbsp; @item.PerfilRequerido</li>
                            <li class="list-group-item"><i class="bi bi-tags"></i>&nbsp; @item.PrecioInicial</li>
                            <li class="list-group-item"><i class="bi bi-exclamation-circle"></i>&nbsp; @item.Estado</li>
                        </ul>
                        <div class="card-body d-grid gap-2">
                            <a href="VerMiSubastaIndividual/@item.PublicacionId" class="btn btn-secondary colorButton">Ver Subasta</a>
                        </div>
                    </div>

                }
            }
            else
            {
                <p>No se encontro resultados</p>
            }

            @* mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm *@

        </div>

        <div class="contenidoOpciones">

            <div class="card" style="width: 100%;">
                <div class="card-body">
                    
                    <h4 class="card-title tituloOpcion">Opciones y filtros</h4>

                    <br />

                    <h5 class="card-title">Filtros</h5>

                    <div class="form-check">
                        <input @onclick="@(()=> OrdenarPublicacion("Ascendente"))" checked="@("Ascendente" == ordenSeleccionada)" class="form-check-input" type="checkbox" id="checkOrden1">
                        <label class="form-check-label" for="checkOrden1">
                            Ascendente
                        </label>
                    </div>

                    <div class="form-check">
                        <input @onclick="@(()=> OrdenarPublicacion("Descendente"))" checked="@("Descendente" == ordenSeleccionada)" class="form-check-input" type="checkbox" id="checkOrden2">
                        <label class="form-check-label" for="checkOrden2">
                            Descendente
                        </label>
                    </div>

                    <hr class="borde" />

                    <div class="mb-3">
                        <label for="exampleFormControlInput1" class="form-label">Buscar Subasta</label>
                        <input @bind="valorBusqueda" @oninput="CargarPublicacionBuscada" type="text" class="form-control" id="exampleFormControlInput1" placeholder="Buscar...">
                    </div>

                    <hr class="borde" />

                    <div class="mb-3">
                        <label for="exampleFormControlInput1" class="form-label">Crear Subasta</label>
                        <div class="d-grid gap-2">
                            <a class="btn btn-success" @onclick="@(()=> ShowModal(idUsuario))">Crear Subasta</a>
                        </div>
                    </div>

                </div>
            </div>

        </div>

    </div>

    <div class="content2">

        <PaginadoPublicaciones PaginaActual="@paginaActual"
                               TotalPaginas="@totalPaginas"
                               OnPageChanged="HandlePageChanged">
        </PaginadoPublicaciones>

    </div>

</div>

@code 
{
    [Parameter]
    public long idUsuario { get; set; } = 0;

    [CascadingParameter] public IModalService Modal { get; set; } = default!;


    // Objetos de modelos mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm|

    private ApiResponse<List<PublicacioneDTO>>? respuestaData;

    // Variables con valores cambiantes mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm|

    private string valorOrden = "Descendente";
    private string valorBusqueda = "";
    private string? ordenSeleccionada;

    // Variables para Paginacion mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm|

    private int paginaActual = 1;
    private int tamanoPagina = 15;
    private long registrosActuales;
    private int totalPaginas;

    // MetodoInicializador mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm|

    protected override async Task OnInitializedAsync()
    {

        await CargarPagina(paginaActual, "Descendente");

        await StartRegistro();

    }

    // Metodos Generales mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm|

    private async Task OrdenarPublicacion(string valor)
    {
        if (ordenSeleccionada == valor)
        {
            ordenSeleccionada = null;
        }
        else
        {
            ordenSeleccionada = valor;
        }

        await CargarPagina(paginaActual, valor);
        valorOrden = valor;
    }

    private async Task CargarPagina(int numeroPagina, string orden)
    {
        ParametrosPaginacion parametros = new()
            {
                NumeroPagina = numeroPagina,
                TamañoPagina = tamanoPagina,
                Orden = orden,
                Buscar = valorBusqueda
            };

        respuestaData = await publicacionesService.MostrarPubliPorId(parametros, idUsuario);
        registrosActuales = respuestaData.TotalRegistros;
        totalPaginas = (int)Math.Ceiling((double)registrosActuales / tamanoPagina);
        paginaActual = numeroPagina;
    }

    private async Task CargarPublicacionBuscada(ChangeEventArgs e)
    {
        try
        {
            valorBusqueda = e.Value.ToString();

            if (valorBusqueda != "")
            {
                await CargarPagina(paginaActual, valorOrden);
            }
            else
            {
                await CargarPagina(paginaActual, valorOrden);
            }
        }
        catch (InvalidOperationException ex)
        {
            Console.WriteLine($"Error al realizar la solicitud: {ex.Message}");
            throw;
        }
    }

    // Handlers mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm|

    private async Task HandlePageChanged(int newPage)
    {
        paginaActual = newPage;
        await CargarPagina(newPage, valorOrden);
    }

    // Modals mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm|

    private async Task ShowModal(long ID)
    {
        var options = new ModalOptions()
            {
                Size = ModalSize.Large,
                Position = ModalPosition.Middle
            };

        var parametros = new ModalParameters().Add(nameof(ModalCrearSubasta.idUsuario), ID);

        var modal = Modal.Show<ModalCrearSubasta>("Crear Subasta", parametros, options);
        var resultado = await modal.Result;

        if (resultado.Confirmed)
        {
            if (resultado.Data.ToString() == "Ejecucion Correcta")
            {
                await CargarPagina(paginaActual, "Descendente");
            }
        }

    }

    // Metodos Notificaciones mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm|

    void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);
    }

    //-----------------------------------------------------------|

    public async Task ShowRegistro(string message)
    {
        Console.WriteLine(message);

        await CargarPagina(paginaActual, valorOrden);

        await InvokeAsync(StateHasChanged);

        ShowNotification(new NotificationMessage
            {
                Severity = NotificationSeverity.Info,
                Summary = "Subasta Creada",
                Detail = "Subasta creada con exito",
                Duration = 4000,
                CloseOnClick = true,
                Payload = DateTime.Now
            });
    }

    public async Task StartRegistro()
    {
        hubRegistroService.OnRegisterReceived += ShowRegistro;
        await hubRegistroService.ConnectAsync();
    }

    //-----------------------------------------------------------|

    public async ValueTask DisposeAsync()
    {
        hubRegistroService.OnRegisterReceived -= ShowRegistro;
        await hubRegistroService.DisconnectAsync();
    }

}
